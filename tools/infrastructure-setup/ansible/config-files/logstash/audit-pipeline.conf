input {
# This provide an input from Imperva via a syslog like feed from the gateways of
# audit data.  It is coming over tcp port 5516.
  udp {
    type => audit
    port => 5514
  }

  tcp {
    type => audit
    port => 5514
  }
}

# This section begins formatting the incoming message intot he proper format for
# writing into Elasticsearch.
filter {
# If the type is set to "audit", do the following...
  if [type] == "audit" {
    # This first mutate strips off the syslog priority from the front of the
    # message.
    mutate {
      gsub => [ "message", "\<[0-9][0-9]\>", ""  ]
    }
    # The formats the contents into json pairs.
    json {
      source => "message"
    }

    # Then removes the "message" field from the data beign sent to
    # Elasticsearch.
    mutate {
      remove_field => [ "message" ]
    }
    # Check the source ip address and see if it is an internal network
    cidr {
      address => [ "%{[source-ip]}" ]
      network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
      add_field => { "[src-locality]" => "Internal" }
    }
    # if src_locatlity is not !nternal, set it to External.
    if [src-locality] != "Internal" {
      mutate {
        add_field => { "[src-locality]" => "External" }
      }
    }
    # set the geoip information if the src_locality is not private
    if [src-locality] == "External" {
      geoip {
        source => "[source-ip]"
        target => "[geoip_src]"
      }
    }
    # Now set "event.source.of.activity" to either "remote" or "local" based on
    # "event.agent.name".
    if [event][agent-name] == "" {
      mutate {
        add_field => { "event.source-of-activity" => "Remote" }
      }
    }
    else {
      mutate {
        add_field => { "event.source-of-activity" => "Local" }
      }
    }
    # Now set "event.event-origin-type" to either "Network", "Agent",
    # or "Log Collector" based on if "event.agent-name" is blank, or
    # "event.log-collector-name" is not blank."
    if [event][log-collector-name] != "" {
      mutate {
        add_field => { "event.event-origin-type" => "Log Collector" }
      }
    }
    else if [event][agent-name] == "" {
      mutate {
        add_field => { "event.event-origin-type" => "Network" }
      }
    }
    else {
      mutate {
        add_field => { "event.event-origin-type" => "Agent" }
      }
    }
  }
}

output {
  # If the type is set to "audit", do the following...
  if [type] == "audit" {
    # if the jason parseing failed, write the details to a log file.
    if "_jsonparsefailure" in [tags] {
      file {
        path => "/tmp/jsonfailures.%{+YYYY.MM.dd}.txt"
        codec => rubydebug {
          metadata => true
        }
      }
    }
    else {
      # This writes the data to Elasticsearch.
      elasticsearch {
        hosts => "http://localhost:9200"
        index => "audit-%{+YYYY.MM.dd}"
      }
    }
  }
}
